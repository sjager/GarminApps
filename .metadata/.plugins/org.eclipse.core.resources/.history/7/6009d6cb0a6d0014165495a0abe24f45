using Toybox.WatchUi as Ui;
using Toybox.Graphics as Gfx;
using Toybox.System as Sys;
using Toybox.Lang as Lang;
using Toybox.Application as App;

var timer;

class ViewPositionDelegate extends Ui.BehaviorDelegate
{
	function onMenu()
	{
		timer.stop();
		Ui.pushView(new ChooseHome(), new ChooseHomeDelegate(), Ui.SLIDE_LEFT);
	}
}

class ViewPosition extends Ui.DataField {	
	//! Update the view
	function redraw() {
		Ui.requestUpdate();
	}

	function initialize() {

	}
	
	function onShow() {
		timer = new Timer.Timer();
    	timer.start( method(:redraw), 500, true);
	}
	
	function onLayout(dc) {

	}
	
	function onUpdate(dc)
	{
		dc.clear();
		dc.setColor(Gfx.COLOR_GREEN, Gfx.COLOR_BLUE);
		dc.fillRectangle(0, 0, dc.getWidth(), dc.getHeight());
		
		var app = App.getApp();
		//var homeCoordLong = app.getProperty("Home_Coords");
		var homeCoordLat = app.getProperty("Home_Coord_Latitude");
		var homeCoordLong = app.getProperty("Home_Coord_Longitude");
		var curCoordLat = app.getProperty("Current_Coord_Latitude");
		var curCoordLong = app.getProperty("Current_Coord_Longitude");
		if(homeCoordLong != null && homeCoordLat != null)
		{
			Sys.println(homeCoordLat + " in View Position");
			Sys.println(homeCoordLong + " in View Position");
			Sys.println(curCoordLat + " in View Position");
			Sys.println(curCoordLong + " in View Position");
			dc.setColor(Gfx.COLOR_BLUE, Gfx.COLOR_TRANSPARENT);
			var distance = computeDist(homeCoordLat, homeCoordLong, curCoordLat, curCoordLong).toString();
			Sys.println(distance);
			Sys.println("----------");
			dc.drawText(dc.getWidth()/2, dc.getHeight()/3, Gfx.FONT_SMALL, "Distance from home", Gfx.TEXT_JUSTIFY_CENTER);
			dc.drawText(dc.getWidth()/2, dc.getHeight()*2/3, Gfx.FONT_SMALL, distance, Gfx.TEXT_JUSTIFY_CENTER);
			
		} else {
			dc.setColor(Gfx.COLOR_BLUE, Gfx.COLOR_TRANSPARENT);
			var text = "No Home Position Recorded";
			dc.drawText(dc.getWidth()/2, dc.getHeight()/2, Gfx.FONT_SMALL, text, Gfx.TEXT_JUSTIFY_CENTER);
		}
	}
	
	function computeDist(pt1Lat, pt1Long, pt2Lat, pt2Long) {
	
		//Convert degree strings to float numbers
		var point1Lat = pt1Lat.toFloat();
		var point1Long = pt1Long.toFloat();
		var point2Lat = pt2Lat.toFloat();
		var point2Long = pt2Long.toFloat();
		
		Sys.println(point1Lat + " after conversion");
		Sys.println(point1Long + " after conversion");
		Sys.println(point2Lat + " after conversion");
		Sys.println(point2Long + " after conversion");
		
		var radius = 6371;
		
		//Convert to radians
		var radLat1 = point1Lat * (3.14159/180.0);
		var radLat2 = point2Lat * (3.14159/180.0);
		var dLat = (point2Lat - point1Lat) * (3.14159/180.0);
		var dLong = (point2Long - point1Long) * (3.14159/180.0);
		
		Sys.println("radLat1=" + radLat1);
		Sys.println("radLat2" + radLat2);
		Sys.println("dLat" + dLat);
		Sys.println("dLong" + dLong);		
		
		//Use the Haversine formula to calculate the great-circle distance between two coordinates
		var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        	Math.cos(radLat1) * Math.cos(radLat2) *
        	Math.sin(dLong/2) * Math.sin(dLong/2);
        Sys.println("a=" + a);
		var c = 2 * atan2(Math.sqrt(a), Math.sqrt(1-a));
		Sys.println("c=" + c);
		var dist = radius * c;
		return dist;	
	}
	
	//Calculates the arctan such that the answer is in the correct quadrant. 
	function atan2(x,y) 
	{
		var result = 2 * Math.atan((Math.sqrt(Math.pow(x,2)+Math.pow(y,2))-y)/x);
		return result;
	}
}